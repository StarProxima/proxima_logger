import '../../support/log_settings.dart';
import '../../support/log_type.dart';

/// A [IStackTraceFormatter] formats a [StackTrace].
abstract class IStackTraceFormatter {
  String? format(ILogType log, StackTrace? stackTrace, {required bool isError});
}

/// Default implementation of [StackTraceFormatter]. Removes unnecessary lines in the [StackTrace].
class StackTraceFormatter implements IStackTraceFormatter {
  const StackTraceFormatter(this.settings);

  final SettingsBuilder settings;

  /// Matches a stacktrace line as generated on Android/iOS devices.
  static final _deviceStackTraceRegex =
      RegExp(r'#[0-9]+[\s]+(.+) \(([^\s]+)\)');

  /// Matches a stacktrace line as generated by Flutter web.
  static final _webStackTraceRegex =
      RegExp(r'^((packages|dart-sdk)\/[^\s]+\/)');

  /// Matches a stacktrace line as generated by browser Dart.
  static final _browserStackTraceRegex =
      RegExp(r'^(?:package:)?(dart:[^\s]+|[^\s]+)');

  static bool _discardDeviceStacktraceLine(String line) {
    final match = _deviceStackTraceRegex.matchAsPrefix(line);
    if (match == null) {
      return false;
    }
    return match.group(2)!.startsWith('package:flutter') ||
        match.group(2)!.startsWith('dart:');
  }

  static bool _discardWebStacktraceLine(String line) {
    final match = _webStackTraceRegex.matchAsPrefix(line);
    if (match == null) return false;

    return line.contains('packages/proxima_logger') ||
        match.group(1)!.startsWith('dart-sdk/lib');
  }

  static bool _discardBrowserStacktraceLine(String line) {
    final match = _browserStackTraceRegex.matchAsPrefix(line);
    if (match == null) return false;

    return line.contains('package:proxima_logger') ||
        match.group(1)!.startsWith('dart:');
  }

  @override
  String? format(
    ILogType log,
    StackTrace? stackTrace, {
    required bool isError,
  }) {
    final typeSettings = settings(log);

    var lines = stackTrace.toString().split('\n');

    lines = lines
        .where(
          (line) =>
              !_discardDeviceStacktraceLine(line) &&
              !_discardWebStacktraceLine(line) &&
              !_discardBrowserStacktraceLine(line),
        )
        .toList();

    if (!isError &&
        typeSettings.stackTraceBeginIndex > 0 &&
        typeSettings.stackTraceBeginIndex < lines.length - 1) {
      lines = lines.sublist(typeSettings.stackTraceBeginIndex);
    }
    final formatted = <String>[];
    var count = 0;

    final skipStackTraceRegExp = typeSettings.skipStackTraceRegExp != null
        ? RegExp(typeSettings.skipStackTraceRegExp!)
        : null;

    for (final line in lines) {
      final skipTrace =
          (skipStackTraceRegExp?.hasMatch(line) ?? false) || line.isEmpty;

      if (skipTrace) continue;

      final formatedLine = line
          .replaceFirst(
            typeSettings.removeAsynchronousSuspensionFromStackTrace
                ? RegExp(r'#\d+\s+|<asynchronous suspension>')
                : RegExp(r'#\d+\s+'),
            '',
          )
          .replaceAll('.<anonymous closure>', '()');

      if (formatedLine.isEmpty) continue;

      formatted.add(
        '#$count   $formatedLine',
      );

      if (isError) {
        if (++count >= typeSettings.errorStackTraceMethodCount) break;
      } else {
        if (++count >= typeSettings.stackTraceMethodCount) break;
      }
    }

    if (formatted.isEmpty) {
      return null;
    } else {
      return formatted.join('\n');
    }
  }
}
